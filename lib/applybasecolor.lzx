<mixin name="applybasecolor">
    <attribute name="basecolor" style="base-color" type="color"/>
    <handler name="oninit">
        this.setAttribute('basecolor', this.basecolor);
    </handler>

    <handler name="onbasecolor" args="basecolor">
        if (! this.isinited) return;

        if (! basecolor) return;
        // derive other colors from the basecolor if not set already
        var hsv = LzColorUtils.tohsv(basecolor);
        if (! this.bordercolor) {
            this.setAttribute('bordercolor', LzColorUtils.fromhsv(hsv.h, hsv.s, hsv.v - .4039));
        }
        if (! this.interiorfillcolor) {
            this.setAttribute('interiorfillcolor', LzColorUtils.fromhsv(hsv.h, hsv.s, hsv.v));
        }
        if (! this.interiorbordercolor) {
            this.setAttribute('interiorbordercolor', LzColorUtils.fromhsv(hsv.h, hsv.s, hsv.v - .2196));
        }
        if (! this.gradientfillstartup) {
            this.setAttribute('gradientfillstartup', LzColorUtils.fromhsv(hsv.h, hsv.s, hsv.v - .1098));
        }
        if (! this.gradientfillstopup) {
            this.setAttribute('gradientfillstopup', LzColorUtils.fromhsv(hsv.h, hsv.s, hsv.v));
        }
        if (! this.gradientfillstartover) {
            this.setAttribute('gradientfillstartover', LzColorUtils.fromhsv(hsv.h, hsv.s, hsv.v - .047));
        }
        if (! this.gradientfillstopover) {
            this.setAttribute('gradientfillstopover', LzColorUtils.fromhsv(hsv.h, hsv.s, hsv.v - .0039));
        }
        if (! this.gradientfillstartdown) {
            this.setAttribute('gradientfillstartdown', LzColorUtils.fromhsv(hsv.h, hsv.s, hsv.v - .0862));
        }
        if (! this.gradientfillstopdown) {
            this.setAttribute('gradientfillstopdown', LzColorUtils.fromhsv(hsv.h, hsv.s, hsv.v - .1999));
        }
        this.redraw();
    </handler>
</mixin>
