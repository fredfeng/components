<mixin name="drawbutton">
    <attribute name="basecolor"      style="base-color" type="color"/>
    <attribute name="cornerradius"   style="corner-radius" type="number" value="0"/>
    <attribute name="borderwidth"    style="border-width" type="number"/>
    <attribute name="bordercolor"    style="border-color" type="color"/>

    <handler name="oninit">
        this.setAttribute('basecolor', this.basecolor);
    </handler>

    <handler name="onbasecolor" args="basecolor">
        if (! this.isinited) return;

        if (! basecolor) return;
        // derive other colors from the basecolor if not set already
        var hsv = LzColorUtils.tohsv(basecolor);
        if (! this.bordercolor) {
            this.setAttribute('bordercolor', LzColorUtils.fromhsv(hsv.h, hsv.s, hsv.v - .4039));
        }
        if (! this.interiorfillcolor) {
            this.setAttribute('interiorfillcolor', LzColorUtils.fromhsv(hsv.h, hsv.s, hsv.v));
        }
        if (! this.interiorbordercolor) {
            this.setAttribute('interiorbordercolor', LzColorUtils.fromhsv(hsv.h, hsv.s, hsv.v - .2196));
        }
        if (! this.gradientfillstartup) {
            this.setAttribute('gradientfillstartup', LzColorUtils.fromhsv(hsv.h, hsv.s, hsv.v - .1098));
        }
        if (! this.gradientfillstopup) {
            this.setAttribute('gradientfillstopup', LzColorUtils.fromhsv(hsv.h, hsv.s, hsv.v));
        }
        if (! this.gradientfillstartover) {
            this.setAttribute('gradientfillstartover', LzColorUtils.fromhsv(hsv.h, hsv.s, hsv.v - .047));
        }
        if (! this.gradientfillstopover) {
            this.setAttribute('gradientfillstopover', LzColorUtils.fromhsv(hsv.h, hsv.s, hsv.v - .0039));
        }
        if (! this.gradientfillstartdown) {
            this.setAttribute('gradientfillstartdown', LzColorUtils.fromhsv(hsv.h, hsv.s, hsv.v - .0862));
        }
        if (! this.gradientfillstopdown) {
            this.setAttribute('gradientfillstopdown', LzColorUtils.fromhsv(hsv.h, hsv.s, hsv.v - .1999));
        }
        this.draw();
    </handler>

    <handler name="onframe" method="draw"/>
    <method name="draw" args="ignore=null" >            
        if (! this.context || ! this.isinited) return;
        switch(this.frame) {
            case 1:
                var state = 'up';
                break;
            case 2:
                var state = 'over';
                break;
            case 3:
                var state = 'down';
                break;
            case 4:
                var state = 'up';
                break;
            default:
                return;
        }
        //Debug.info('draw', state);
        this.clear();
        this.globalAlpha = this.disabled ? .5 : 1;
        this.lineWidth = this.borderwidth;
        this.drawinteriorborder(state);
        this.drawgradient(state);
        this.drawborder();
    </method>
    
    <method name="drawborder">
        if (this.borderwidth > 0) {
            if (! this.bordercolor) return;
            // DRAW  BORDER
            this.beginPath();
            this.rect(0, 0, this.width, this.height, this.cornerradius);
            this.closePath();

            this.strokeStyle = this.bordercolor;
            this.stroke();
        }
    </method>

    <handler name="oninteriorbordercolor" args="b">
        //Debug.debug('oninteriorbordercolor', b, (LzColorUtils.tohsv(b)).v - (LzColorUtils.tohsv(LzColorUtils.hextoint('#f2f2f2'))).v);
    </handler>
    <attribute name="interiorbordercolor"    value="null" style="interior-border-color" type="color"/>
    <attribute name="interiorfillcolor"      value="null" style="interior-fill-color" type="color"/>
    <attribute name="interiorbordercolorup"    value="${this.interiorbordercolor}" style="interior-border-color-up" type="color"/>
    <attribute name="interiorfillcolorup"      value="${this.interiorfillcolor}" style="interior-fill-color-up" type="color"/>
    <attribute name="interiorbordercolorover"  value="${this.interiorbordercolor}" style="interior-border-color-over" type="color"/>
    <attribute name="interiorfillcolorover"    value="${this.interiorfillcolor}" style="interior-fill-color-over" type="color"/>
    <attribute name="interiorbordercolordown"  value="${this.interiorbordercolor}" style="interior-border-color-down" type="color"/>
    <attribute name="interiorfillcolordown"    value="${this.interiorfillcolor}" style="interior-fill-color-down" type="color"/>

    <method name="drawinteriorborder" args="state='up'">
        if (! this['interiorfillcolor' + state]) return;
        // DRAW INTERIOR BORDER AND FILL
        this.beginPath();
        this.rect(1, 1, this.width - 2, this.height - 2, this.cornerradius);
        this.closePath();

        this.fillStyle = this['interiorfillcolor' + state];
        this.fill();

        if (this.borderwidth > 0) {
            if (! this['interiorbordercolor' + state]) return;
            this.strokeStyle = this['interiorbordercolor' + state];
            this.stroke();
        }
    </method>

    <handler name="ongradientfillstartup" args="b">
        //Debug.debug('ongradientfillstartup', b, (LzColorUtils.tohsv(b)).v - (LzColorUtils.tohsv(LzColorUtils.hextoint('#f2f2f2'))).v);
    </handler>
    <attribute name="gradientfillstartup"      value="null" style="gradientfill-start-up" type="color"/>
    <handler name="ongradientfillstopup" args="b">
        //Debug.debug('ongradientfillstopup', b, (LzColorUtils.tohsv(b)).v - (LzColorUtils.tohsv(LzColorUtils.hextoint('#f2f2f2'))).v);
    </handler>
    <attribute name="gradientfillstopup"       value="null" style="gradientfill-stop-up" type="color"/>
    <handler name="ongradientfillstartover" args="b">
        //Debug.debug('ongradientfillstartover', b, (LzColorUtils.tohsv(b)).v - (LzColorUtils.tohsv(LzColorUtils.hextoint('#f2f2f2'))).v);
    </handler>
    <attribute name="gradientfillstartover"    value="null" style="gradientfill-start-over" type="color"/>
    <handler name="ongradientfillstopover" args="b">
        //Debug.debug('ongradientfillstopover', b, (LzColorUtils.tohsv(b)).v - (LzColorUtils.tohsv(LzColorUtils.hextoint('#f2f2f2'))).v);
    </handler>
    <attribute name="gradientfillstopover"     value="null" style="gradientfill-stop-over" type="color"/>
    <handler name="ongradientfillstartdown" args="b">
        //Debug.debug('ongradientfillstartdown', b, (LzColorUtils.tohsv(b)).v - (LzColorUtils.tohsv(LzColorUtils.hextoint('#f2f2f2'))).v);
    </handler>
    <attribute name="gradientfillstartdown"    value="null" style="gradientfill-start-down" type="color"/>
    <handler name="ongradientfillstopdown" args="b">
        //Debug.debug('ongradientfillstopdown', b, (LzColorUtils.tohsv(b)).v - (LzColorUtils.tohsv(LzColorUtils.hextoint('#f2f2f2'))).v);
    </handler>
    <attribute name="gradientfillstopdown"     value="null" style="gradientfill-stop-down" type="color"/>

    <handler name="gradientfillstartup" method="_resetgradientcache"/>
    <handler name="gradientfillstopup" method="_resetgradientcache"/>
    <handler name="gradientfillstartover" method="_resetgradientcache"/>
    <handler name="gradientfillstopover" method="_resetgradientcache"/>
    <handler name="gradientfillstartdown" method="_resetgradientcache"/>
    <handler name="gradientfillstopdown" method="_resetgradientcache"/>
    <method name="_resetgradientcache" args="ignore">
        this._gradientfills = [];
    </method>

    <method name="drawgradient" args="state='up'">
        // DRAW GRADIENT
        if (! this['gradientfillstart' + state] || ! this['gradientfillstop' + state]) return;
        this.beginPath();
        if (state == 'down') {
            this.rect(2, 2, this.width - 4, (this.height - 4) * .5);
        } else {
            this.rect(2, height * .5, this.width - 4, (this.height - 4) * .5);
        }
        this.closePath();

        // cache gradient fills
        if (! this._gradientfills) this._gradientfills = [];
        if (! this._gradientfills[this.frame]) {
            var g = this.createLinearGradient(0,Math.round( 0.5*height),0,height);
            g.addColorStop(0, this['gradientfillstart' + state] );
            g.addColorStop(1, this['gradientfillstop' + state] );
            this._gradientfills[this.frame] = g;
        }
        this.fillStyle = this._gradientfills[this.frame];
        this.fill();
    </method>
</mixin>
