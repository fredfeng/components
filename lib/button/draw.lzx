<mixin name="drawbutton">
    <method name="draw" args="context">
        <![CDATA[
        if (this['drawtarget'] && context === this) {
            context.clear();
            return;
        }
        //Debug.info('draw', this.mousestate);
        context.globalAlpha = this.disabled ? .5 : 1;
        context.lineWidth = context.borderwidth;

        this.styleinteriorborder(context);
        this.drawinteriorborder(context);

        this.stylegradient(context);
        this.drawgradient(context);

        this.styleborder(context);
        this.drawborder(context);
        ]]>
    </method>

    <handler name="onmousestate" method="redraw"/>

    <method name="styleborder" args="context">
        if (! this.bordercolor) return;
        context.strokeStyle = this.bordercolor;
    </method>
    <method name="drawborder" args="context">
        <![CDATA[
        if (this.borderwidth <= 0) return;
        if (! this.bordercolor) return;

        context.beginPath();
        this.drawshape(context, 0, 0, this.width - 1, this.height - 1);
        context.closePath();

        context.stroke();
        ]]>
    </method>

    <method name="styleinteriorborder" args="context">
        if (! this['interiorfillcolor' + this.mousestate] || ! this['interiorbordercolor' + this.mousestate]) return;
        context.fillStyle = this['interiorfillcolor' + this.mousestate];
        if (this.borderwidth > 0) {
            context.strokeStyle = this['interiorbordercolor' + this.mousestate];
        }
    </method>
    <method name="drawinteriorborder" args="context">
        if (! this['interiorfillcolor' + this.mousestate]) return;
        // Draw interior border and fill
        context.beginPath();
        this.drawshape(context, 1, 1, this.width - 3, this.height - 3);
        context.closePath();

        context.fill();
        if (this.borderwidth > 0) {
            context.stroke();
        }
    </method>

    <method name="stylegradient" args="context">
        var css = this['gradientfill'];
        if (this.vertical) {
            var o = css.indexOf('top');
            if (o > -1) {
                css = 'left' + css.substring(o + 3);
            } else {
                o = css.indexOf('bottom');
                if (o > -1) {
                    css = 'right' + css.substring(o + 6);
                }
            }
        }
        context.fillStyle = this.cssToLinearGradient(context, css);
    </method>

    <method name="drawgradient" args="context">
        context.beginPath();
        var inset = 0;
        if (this.bevel) {
            var inset = this.bevel + this.borderwidth;
        }
        this.drawshape(context, inset, inset, this.width - (inset * 2), this.height - (inset * 2));
        context.fill();
    </method>
</mixin>
