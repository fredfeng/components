<mixin name="drawbutton">
    <method name="draw" args="context">
        <![CDATA[
        if (this['drawtarget'] && context === this) {
            context.clear();
            return;
        }
        //Debug.info('draw', this.mousestate);
        context.globalAlpha = this.disabled ? .5 : 1;
        context.lineWidth = context.borderwidth;

        this.styleinteriorborder(context);
        this.drawinteriorborder(context);

        this.stylegradient(context);
        this.drawgradient(context);

        this.styleborder(context);
        this.drawborder(context);
        ]]>
    </method>
    
    <method name="styleborder" args="context">
        if (! this.bordercolor) return;
        context.strokeStyle = this.bordercolor;
    </method>
    <method name="drawborder" args="context">
        if (this.borderwidth > 0) {
            if (! this.bordercolor) return;
            context.beginPath();
            context.rect(0, 0, this.width - 1, this.height - 1, this.cornerradius);
            context.closePath();

            context.stroke();
        }
    </method>

    <method name="styleinteriorborder" args="context">
        if (! this['interiorfillcolor' + this.mousestate] || ! this['interiorbordercolor' + this.mousestate]) return;
        context.fillStyle = this['interiorfillcolor' + this.mousestate];
        if (this.borderwidth > 0) {
            context.strokeStyle = this['interiorbordercolor' + this.mousestate];
        }
    </method>
    <method name="drawinteriorborder" args="context">
        if (! this['interiorfillcolor' + this.mousestate]) return;
        // DRAW INTERIOR BORDER AND FILL
        context.beginPath();
        context.rect(1, 1, this.width - 3, this.height - 3, this.cornerradius);
        context.closePath();

        context.fill();
        if (this.borderwidth > 0) {
            context.stroke();
        }
    </method>

    <handler name="ongradientfillstartup" method="__resetgradientcache"/>
    <handler name="ongradientfillstopup" method="__resetgradientcache"/>
    <handler name="ongradientfillstartover" method="__resetgradientcache"/>
    <handler name="ongradientfillstopover" method="__resetgradientcache"/>
    <handler name="ongradientfillstartdown" method="__resetgradientcache"/>
    <handler name="ongradientfillstopdown" method="__resetgradientcache"/>
    <handler name="ongradientsideways" method="__resetgradientcache"/>
    <method name="__resetgradientcache" args="ignore">
        this._gradientfills = [];
    </method>

    <method name="stylegradient" args="context">
        if (! this['gradientfillstart' + this.mousestate] || ! this['gradientfillstop' + this.mousestate]) return;
        // cache gradient fills
        if (! this._gradientfills) this._gradientfills = [];
        if (this._gradientfills[this.frame] == null) {
            if (this.vertical) {
                var g = context.createLinearGradient(0,0,width,0);
            } else {
                var g = context.createLinearGradient(0,Math.round( 0.5*height),0,height);
            }
            g.addColorStop(0, this['gradientfillstart' + this.mousestate] );
            g.addColorStop(1, this['gradientfillstop' + this.mousestate] );
            this._gradientfills[this.frame] = g;
        }
        context.fillStyle = this._gradientfills[this.frame];
    </method>

    <method name="drawgradient" args="context">
        if (! this['gradientfillstart' + this.mousestate] || ! this['gradientfillstop' + this.mousestate]) return;

        context.beginPath();
        var bevel = this.bevel + this.borderwidth;
        var width = this.width - (bevel * 2) - 2;
        var height = this.height - bevel - 2;
        if (this.mousestate == 'down') {
            if (this.vertical) {
                context.rect(bevel + 1, bevel, width * .5, height);
            } else {
                context.rect(bevel + 1, bevel, width, height * .5);
            }
        } else {
            if (this.vertical) {
                context.rect(bevel, bevel, width * .5, height);
            } else {
                context.rect(bevel + 1, height * .5, width, height * .5);
            }
        }

        context.fill();
    </method>
</mixin>
