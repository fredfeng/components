<mixin name="drawbutton">
    <handler name="onframe" method="redraw"/>
    <method name="getDrawState">            
        switch(this.frame) {
            case 1:
                return 'up';
            case 2:
                return 'over';
            case 3:
                return 'down';
            case 4:
                return 'up';
        }
    </method>

    <method name="draw" args="context">
        var state = this.getDrawState();
        if (! state) return;
        //Debug.info('draw', state);
        this.globalAlpha = this.disabled ? .5 : 1;
        this.lineWidth = this.borderwidth;
        this.drawinteriorborder(this);
        this.drawgradient(this);
        this.drawborder(this);
    </method>
    
    <method name="drawborder" args="context">
        if (this.borderwidth > 0) {
            if (! this.bordercolor) return;
            context.beginPath();
            context.rect(0, 0, this.width, this.height, this.cornerradius);
            context.closePath();

            context.strokeStyle = this.bordercolor;
            context.stroke();
        }
    </method>

    <handler name="oninteriorbordercolor" args="b">
        //Debug.debug('oninteriorbordercolor', b, (LzColorUtils.tohsv(b)).v - (LzColorUtils.tohsv(LzColorUtils.hextoint('#f2f2f2'))).v);
    </handler>
    <attribute name="interiorbordercolor"    value="null" style="interior-border-color" type="color"/>
    <attribute name="interiorfillcolor"      value="null" style="interior-fill-color" type="color"/>
    <attribute name="interiorbordercolorup"    value="${this.interiorbordercolor}" style="interior-border-color-up" type="color"/>
    <attribute name="interiorfillcolorup"      value="${this.interiorfillcolor}" style="interior-fill-color-up" type="color"/>
    <attribute name="interiorbordercolorover"  value="${this.interiorbordercolor}" style="interior-border-color-over" type="color"/>
    <attribute name="interiorfillcolorover"    value="${this.interiorfillcolor}" style="interior-fill-color-over" type="color"/>
    <attribute name="interiorbordercolordown"  value="${this.interiorbordercolor}" style="interior-border-color-down" type="color"/>
    <attribute name="interiorfillcolordown"    value="${this.interiorfillcolor}" style="interior-fill-color-down" type="color"/>

    <method name="drawinteriorborder" args="context">
        var state = this.getDrawState();
        if (! state) return;
        if (! this['interiorfillcolor' + state]) return;
        // DRAW INTERIOR BORDER AND FILL
        context.beginPath();
        context.rect(1, 1, this.width - 2, this.height - 2, this.cornerradius);
        context.closePath();

        context.fillStyle = this['interiorfillcolor' + state];
        context.fill();

        if (this.borderwidth > 0) {
            if (! this['interiorbordercolor' + state]) return;
            context.strokeStyle = this['interiorbordercolor' + state];
            context.stroke();
        }
    </method>

    <attribute name="vertical"         value="false" type="boolean"/>
    <attribute name="gradientfillstartup"      value="null" style="gradientfill-start-up" type="color"/>
    <attribute name="gradientfillstopup"       value="null" style="gradientfill-stop-up" type="color"/>
    <attribute name="gradientfillstartover"    value="null" style="gradientfill-start-over" type="color"/>
    <attribute name="gradientfillstopover"     value="null" style="gradientfill-stop-over" type="color"/>
    <attribute name="gradientfillstartdown"    value="null" style="gradientfill-start-down" type="color"/>
    <attribute name="gradientfillstopdown"     value="null" style="gradientfill-stop-down" type="color"/>

    <handler name="ongradientfillstartup" method="__resetgradientcache"/>
    <handler name="ongradientfillstopup" method="__resetgradientcache"/>
    <handler name="ongradientfillstartover" method="__resetgradientcache"/>
    <handler name="ongradientfillstopover" method="__resetgradientcache"/>
    <handler name="ongradientfillstartdown" method="__resetgradientcache"/>
    <handler name="ongradientfillstopdown" method="__resetgradientcache"/>
    <handler name="ongradientsideways" method="__resetgradientcache"/>
    <method name="__resetgradientcache" args="ignore">
        this._gradientfills = [];
    </method>

    <method name="drawgradient" args="context">
        var state = this.getDrawState();
        if (! state) return;
        if (! this['gradientfillstart' + state] || ! this['gradientfillstop' + state]) return;

        context.beginPath();
        var bevel = 1;
        var width = this.width - (bevel * 2);
        var height = this.height - (bevel * 2);
        if (state == 'down') {
            if (this.vertical) {
                context.rect(bevel, bevel, width * .5, height);
            } else {
                context.rect(bevel, bevel, width, height * .5);
            }
        } else {
            if (this.vertical) {
                context.rect(bevel, bevel, width * .5, height);
            } else {
                context.rect(bevel, height * .5, width, height * .5);
            }
        }

        // cache gradient fills
        if (! this._gradientfills) this._gradientfills = [];
        if (! this._gradientfills[this.frame]) {
            if (this.vertical) {
                var g = context.createLinearGradient(0,0,width,0);
            } else {
                var g = context.createLinearGradient(0,Math.round( 0.5*height),0,height);
            }
            g.addColorStop(0, this['gradientfillstart' + state] );
            g.addColorStop(1, this['gradientfillstop' + state] );
            this._gradientfills[this.frame] = g;
        }
        context.fillStyle = this._gradientfills[this.frame];
        context.fill();
    </method>
</mixin>
