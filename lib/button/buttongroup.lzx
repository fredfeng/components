<class name="buttongroup" extends="basepanel" with="stylebutton,drawbutton" drawchildren="false">
    <attribute name="axis" type="string" value="x"/>
    <simplelayout axis="${parent.axis}" spacing="0"/>

    <attribute name="dividergradient" style="divider-gradient" type="string" value=""/>
    <handler name="onaddsubview" method="_updateborders"/>
    <method name="_updateborders" args="ignore=null">
        <![CDATA[
        if (! this._borderradius) return;
        if (! this.handleArrowDel) {
            this.handleArrowDel = new LzDelegate(this, 'handleArrow');
        } else {
            this.handleArrowDel.unregisterAll();
        }
        // set corner radii
        var subviews = this.subviews;
        var radii = this._borderradius;
        var axis = this.axis;
        for (var i = 0, l = subviews.length; i < l; i++) {
            var button = subviews[i];

            var topleft = 0;
            var topright = 0;
            var bottomright = 0;
            var bottomleft = 0;

            if (i == 0) {
                if (axis == 'x') {
                    topleft = radii[0]
                    bottomleft = radii[3];
                } else {
                    topleft = radii[0];
                    topright = radii[1];
                }
            } else if (i == l - 1) {
                if (axis == 'x') {
                    topright = radii[1];
                    bottomright = radii[2];
                } else {
                    bottomleft = radii[3];
                    bottomright = radii[2];
                }
            }
            button.setAttribute('borderradius', ([topleft, topright, bottomright, bottomleft]).join(' '));
            this.handleArrowDel.register(button, 'onkeydown');
        }
        ]]>
    </method>
    <method name="handleArrow" args="key">
        <![CDATA[
        var direction;
        if (key == 37 || key == 38) {
            // if left or up
            direction = -1;
        } else if (key == 39 || key == 40) {
            // if right or down
            direction = 1;
        } else {
            return;
        }

        // find the currently focused view
        var focusedview;
        for (var i = 0, l = this.subviews.length; i < l; i++) {
            var view = this.subviews[i];
            if (view.focused) {
                focusedview = view;
                break;
            }
        }
        if (focusedview) {
            var newview;
            // find the next view that's not disabled
            i += direction
            while (i >= 0 && i < l) {
                var view = this.subviews[i];
                if (view.disabled != true) {
                    newview = view;
                    break
                }
                i += direction
            }
            if (newview) {
                lz.Focus.setFocus(newview);
            }
            //Debug.info('handleArrow', key, view, newview);
        }
        ]]>
    </method>
    <method name="draw" args="context">
        <![CDATA[
        // draw background
        //this.beginPath();
        //this.drawshape(context,0,0,this.width - 1, this.height - 1);
        //this.fillStyle = this.cssToLinearGradient(this.gradientfillup, context);
        //this.fill();
        this._updateborders();

        for (var i = 0, l = subviews.length; i < l; i++) {
            var button = subviews[i];
            // draw button shape
            context.beginPath();
            button.drawshape(context,button.x,button.y,button.width,button.height-1);
            context.closePath();

            // fill with gradient or flat color
            if (button.disabled) {
                context.fillStyle = context.basecolor;
            } else {
                button.stylegradient(context);
            }
            context.fill();
        }
        ]]>
    </method>

    <method name="drawlast" args="context">
        <![CDATA[
        // draw dividers 
        context.fillStyle = this.cssToLinearGradient(context,this.dividergradient);
        var position = 0;
        for (var i = 0, l = this.subviews.length - 1; i < l; i++) {
            var button = subviews[i];

            if (this.axis == 'x') {
                position += button.width;
                context.fillRect(position,1,1,this.height - 2);
            } else {
                position += button.height;
                context.fillRect(1,position,this.width - 2,1);
            }
        }

        // draw border
        this.beginPath();
        this.drawshape(context,0,0,this.width - 1, this.height - 1);

        this.styleborder(context);
        this.stroke();
        ]]>
    </method>
</class>
