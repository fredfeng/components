<library>
    <include href="../basepanel.lzx"/>
    <include href="../componentmodel.lzx"/>
    <include href="../componentfocus.lzx"/>
    <include href="../button/"/>

    <include href="scrollstepbutton.lzx"/>
    <include href="scrollthumb.lzx"/>
    <include href="basescrollbar.lzx"/>

    <class name="scrlbr" extends="basepanel" with="buttonevents,bsscrlbr">
        <attribute name="size" value="16" style="size"/>
        <attribute name="width" value="${this.size}"/>

        <handler name="oninit" args="isover">
            if (canvas.capabilities['minimize_opacity_changes']) {
                // TODO: handle for IE
            } else {
                this.setAttribute('opacity', .4);
            }
        </handler>
        <handler name="onmouseisover" args="isover">
            this.setAttribute('activated', isover);
        </handler>
        <attribute name="activated" value="false" type="boolean"/>
        <event name="onactivated"/>
        <!--- @keywords private -->
        <setter name="activated" args="activated">
            if (activated != this.activated) {
                this.activated = activated;
                if (activated) {
                    this.activate();
                } else {
                    this.deactivate();
                }
            }
            if (this.onactivated.ready) this.onactivated.sendEvent(activated)
        </setter>
        <method name="activateWithTimeout">
            // activate, then deactivate after a little while
            this.setAttribute('activated', true);
            if (! this.__deactivatedel) {
                this.__deactivatedel = new LzDelegate(this, 'deactivate');
            }
            lz.Timer.resetTimer(this.__deactivatedel, 2000);
        </method>
        <method name="activate" args="ignore=null">
            this.activated = true;
            if (canvas.capabilities['minimize_opacity_changes']) {
                // TODO: handle for IE
            } else {
                this.animate('opacity', 1, 200);
            }
        </method>
        <method name="deactivate" args="ignore=null">
            this.activated = false;
            if (! this.isMouseOver()) {
                if (canvas.capabilities['minimize_opacity_changes']) {
                    // TODO: handle for IE
                } else {
                    this.animate('opacity', .4, 200);
                }
            }
        </method>

        <method name="draw" args="context">
            this.beginPath();
            this.drawshape(context,0,0,this.width - 1,this.height - 2);

            this.lineWidth = this.borderwidth;
            this.strokeStyle = this.interiorbordercolor;
            this.fillStyle = this.interiorfillcolor;
            this.fill();
            this.stroke();
        </method>

        <view name="scrolltrack" width="100%" height="100%" with="buttonevents,mousedownrepeater">
            <handler name="onmouseisover" args="isover">
                this.classroot.setAttribute('activated', isover);
            </handler>
            <handler name="onmousedown" method="__gotclick"/>
            <handler name="onmousestilldown" method="__gotclick"/>
            <method name="__gotclick" args="ignore=null">
                <![CDATA[
                var mouse = this.getMouse();
                if (mouse.y > this.thumb.y + this.thumb.height) {
                    var direction = 1;
                } else if (mouse.y < this.thumb.y) {
                    var direction = -1;
                } else {
                    return;
                }
                this.classroot.page(direction);
                this.classroot.setAttribute('activated', true);
                ]]>
            </method>
            <scrlthmb name="thumb" x="1" width="${parent.width-2}" drawtarget="$once{this.classroot}"/>
        </view>
        <scrlstepbtn direction="-1" x="2" y="2" width="${parent.width - 4}"/>
        <scrlstepbtn direction="1" x="2" y="${parent.height - this.height - 2}" width="${parent.width - 4}"/>
    </class>
</library>
